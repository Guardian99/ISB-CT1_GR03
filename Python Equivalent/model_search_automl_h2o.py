# -*- coding: utf-8 -*-
"""Model_Search_AutoML_H2O.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U0jIP6UhnxwokzsULEew2P6exXcI0C00

### Load Dataset
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sn

cars_df = pd.read_csv( "https://drive.google.com/uc?export=download&id=1V_VBbyjGj6vvD0A90S5Lk0DG90djz28B" )

cars_df.head(5)

cars_df.info()

"""### Feature Set Selection"""

cars_df.columns

x_columns = ['KM_Driven', 'Fuel_Type', 'age',
              'Transmission', 'Owner_Type', 'Seats',
              'make', 'mileage_new', 'engine_new', 'model',
              'power_new', 'Location']
## model of the car is not included in the model

cat_features = ['Fuel_Type',
                'Transmission', 'Owner_Type', 'model',
                'make', 'Location']

num_features = list(set(x_columns) - set(cat_features))

num_features

cars_df[x_columns].info()

"""### Encode Categorical Variables"""

encoded_cars_df = pd.get_dummies(cars_df[x_columns],
                                 columns=cat_features)

encoded_cars_df.sample(5)

x_features = list(encoded_cars_df.columns)

encoded_cars_df.shape

"""### Setting X and y variables"""

X = encoded_cars_df
X['Price'] = cars_df['Price']

"""### Data Splitting"""

from sklearn.model_selection import train_test_split

train, test = train_test_split(X,train_size = 0.8,random_state = 100)

train.shape

train[0:10]

test.shape

"""## Finding the best model

Using H2O AutoML Library

Details: https://docs.h2o.ai/h2o/latest-stable/h2o-docs/downloading.html?_ga=2.37321956.534948750.1625291360-92496293.1624088300
"""

# Installing H2O dependencies
!pip install requests
!pip install tabulate
!pip install "colorama>=0.3.8"
!pip install future

# Installing H2O
!pip install -f http://h2o-release.s3.amazonaws.com/h2o/latest_stable_Py.html h2o

import h2o
from h2o.automl import H2OAutoML

## prepare data
h2o.init()

h2o_train = h2o.H2OFrame(train)
h2o_test = h2o.H2OFrame(test)

"""https://docs.h2o.ai/h2o/latest-stable/h2o-docs/automl.html"""

aml = H2OAutoML(max_models=10,
                seed=1,
                stopping_metric='MSE',
                sort_metric='MSE',
                max_runtime_secs = 300,
                exclude_algos = ["GLM", "DeepLearning"])

aml.train(x=x_features,
          y='Price',
          training_frame=h2o_train)
#XRT - Extremely Randomized Trees

"""## Leaderboard"""

# Get leaderboard with `extra_columns` = 'ALL'
lb = h2o.automl.get_leaderboard(aml, extra_columns = 'ALL')
lb

"""### Retrive the details of the models recommended"""

model_ids = list(aml.leaderboard.as_data_frame()['model_id'])

model_ids

"""## XGB Model"""

xgb_model = h2o.get_model('XGBoost_3_AutoML_1_20241114_62049')

xgb_model

xgb_model.actual_params

varimp = xgb_model.varimp()

varimp_df = pd.DataFrame(varimp, columns = ['variable',
                                            'relative_importance',
                                            'scaled_importance',
                                            'percentage'])

varimp_df

varimp_df['cumsum'] = varimp_df.percentage.cumsum()
varimp_df[0:20]

xgb_model.varimp_plot()

"""## Random Forest"""

rf_model = h2o.get_model("DRF_1_AutoML_1_20241114_62049")

rf_model.actual_params

"""## Retriving details of the stacked ensembles"""

# Get the "All Models" Stacked Ensemble model
stacked_model = h2o.get_model("StackedEnsemble_AllModels_1_AutoML_1_20241114_62049")

stacked_model

metalearner = h2o.get_model(stacked_model.metalearner()['name'])

metalearner

