# -*- coding: utf-8 -*-
"""ML_Pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hR6DtmJBhhMG3H92-2A2ZgPgLozUsPD-

# Used Car Price Prediction: KNN

### Dataset

It is a comma separated file and there are 14 columns in the dataset.

- Location - The location in which the car is being sold or is available for purchase.
- Year - The year or edition of the model.
- KM_Driven - The total kilometers are driven in the car by the previous owner(s) in '000 KM.
- Fuel_Type - The type of fuel used by the car. (Petrol, Diesel, Electric, CNG, LPG)
- Transmission - The type of transmission used by the car. (Automatic / Manual)
- Owner_Type - First, Second, Third, or Fourth & Above
- Mileage - The standard mileage offered by the car company in kmpl or km/kg
- Engine - The displacement volume of the engine in CC.
- Power - The maximum power of the engine in bhp.
- Seats - The number of seats in the car.
- Price - The price of the car (target).

### Load Dataset
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sn

cars_df = pd.read_csv( "https://drive.google.com/uc?export=download&id=10ABViLN4Q7vgIlLvepCduU4B3C6BneJR" )

cars_df.sample(5)

cars_df.info()

"""### Feature Set Selection"""

cars_df.columns

x_features = ['KM_Driven', 'Fuel_Type', 'age',
              'Transmission', 'Owner_Type', 'Seats',
              'make', 'mileage', 'engine',
              'power', 'Location']

cat_vars = ['Fuel_Type',
                'Transmission', 'Owner_Type',
                'make', 'Location']

num_vars = list(set(x_features) - set(cat_vars))

num_vars

cars_df[x_features].info()

"""### Need for Data Transformation

1. Data imputation for Seats Column
    - Mean imputation
2. Categorical Encoding for categorical columns
    - OHE Encoding
3. Data scaling
    - Standard scaling

### Setting X and y variables
"""

X = cars_df[x_features]
y = cars_df['Price']

"""### Data Splitting"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,
                                                    y,
                                                    train_size = 0.8,
                                                    random_state = 80)

X_train.shape

X_test.shape

"""### Data Imputation"""

from sklearn.impute import SimpleImputer

imputed_num_vars = ['Seats']

imputed_num_vars

non_imputed_num_vars = list(set(num_vars) - set(imputed_num_vars))

non_imputed_num_vars

mean_imputer = SimpleImputer(strategy='mean')

"""### Encode Categorical Variables"""

from sklearn.preprocessing import OneHotEncoder

ohe_encoder = OneHotEncoder(handle_unknown='ignore')

"""### Scaling numerical vars"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

"""### Creating Pipelines"""

from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

imputed_num_transformer = Pipeline( steps = [
        ('imputation', mean_imputer),
        ('scaler', scaler)])

non_imputed_num_transformer = Pipeline( steps = [('scaler', scaler)])

cat_transformer = Pipeline( steps = [('ohencoder', ohe_encoder)])

preprocessor = ColumnTransformer(
    transformers=[
        ('num_imputed', imputed_num_transformer, imputed_num_vars),
        ('num_not_imputed', non_imputed_num_transformer, non_imputed_num_vars),
        ('catvars', cat_transformer, cat_vars)])

"""### KNN (K-Nearest Neighbor)

"""

from sklearn.neighbors import KNeighborsRegressor

#knn = KNeighborsRegressor(n_neighbors=20)
knn = KNeighborsRegressor(n_neighbors=20, weights='distance')

knn_v1 = Pipeline(steps=[('preprocessor', preprocessor),
                          ('knn', knn)])

knn_v1.fit(X_train, y_train)

from sklearn import set_config
set_config(display='diagram')

knn_v1

"""### Predict on test set"""

y_pred = knn_v1.predict(X_test)

"""### K Fold Cross Validation"""

from sklearn.model_selection import cross_val_score

scores = cross_val_score( knn_v1,
                          X_train,
                          y_train,
                          cv = 10,
                          scoring = 'r2')

scores

scores.mean()

scores.std()

from joblib import dump

dump(knn_v1, "cars.pkl")